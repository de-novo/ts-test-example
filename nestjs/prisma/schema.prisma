/// 미니 프로젝트로써 어디서든 사용할 수 있는 회원을 주로 다룸

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//--------------------------------------
// 1. 회원 
//--------------------------------------
// 1.1 회원 관리 
/// User : 접속 단위
model users {
  id String @id @db.Uuid
  ip String @db.VarChar

  member_id String? @db.Uuid
  member_social_id String? @db.Uuid
   
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  ///-------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])
  @@index([created_at])
  @@index([ip])
  @@map("user")
}

/// Member : 회원 단위 [가입]
model members {
  id String @id @db.Uuid
  email String @db.VarChar
  password String @db.VarChar  

  /// 회원 인증 상태
  email_verified_at DateTime?
  mobile_verified_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime? /// 회원 탈퇴 시간
  status Status @default(ACTIVE)
  ///-------
  /// RELATION
  ///-------
  users users[]
  member_socials member_socials[]
  member_profiles member_profiles[]
  member_profile_snapshots member_profile_snapshots[]
  member_profile_imgs member_profile_imgs[]
  member_logs member_logs[]
  member_salt member_salts?
  verification_codes verification_codes[]
  @@unique([email])
  @@index([created_at])
  @@index([email])
  @@index([status])

}

model member_socials {
  id String @id @db.Uuid

  /// 소셜 타입 (kakao, naver, google, facebook, git, linkedIn.......)
  social_type String @db.VarChar

  /// 외부 소셜 아이디
  uid String @db.VarChar

  /// 외부 시스템 닉네임
  nickname String @db.VarChar

  /// 외부 시스템 패스워드 (암호화) 
  /// 외부시스템에서 제공하는 패스워드
  /// 로그인시 사용하는 개인용 패스워드가 아님
  password String @db.VarChar

  /// 회원 아이디
  member_id String @db.VarChar

  /// 최초 로그인 시간
  created_at DateTime
  status Status @default(ACTIVE)

  ///-------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])

  @@index([created_at])
  @@unique([social_type,uid])
  @@unique([social_type,nickname])
  @@index([social_type,created_at])
  @@index([uid])
}


/// 회원 프로필 
model member_profiles {
  member_id String @id @db.Uuid
  nickname String @db.VarChar

  /// 회원 프로필 사진
  profile_image String @db.VarChar
 
  /// 회원 프로필 사진
  profile_image_url String @db.VarChar
  

  /// -------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@unique([nickname])
  @@index([member_id])
  @@index([created_at])
}


model member_profile_snapshots {
  id String @id @db.Uuid
  member_id String @db.Uuid
  nickname String @db.VarChar
  profile_image String @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ///-------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])
  @@unique([member_id,created_at])
  @@index([member_id])
  @@index([created_at])
}



model member_profile_imgs {
  id String @id @default(uuid())
  member_id String @db.Uuid
  img_url String @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status Status @default(ACTIVE)
  
  ///-------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])
}

model member_logs {
  id String @id @default(uuid())
  member_id String @db.Uuid
  ip String @db.VarChar
  log_type String @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status Status @default(ACTIVE)
  
  member members? @relation(fields: [member_id], references: [id])
  @@index([member_id])
  @@index([created_at])
  @@index([ip])
  @@index([log_type])
}

model member_salts {
  member_id String @db.Uuid
  salt String @db.VarChar
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status Status @default(ACTIVE)
  
  member members @relation(fields: [member_id], references: [id])
  @@unique([member_id])
  @@index([member_id])
  @@index([created_at])
  @@index([salt])
}

model verification_codes {
  id String @id @db.Uuid
  member_id String @db.Uuid
  /// 인증 코드
  code String @db.VarChar
  /// 인증 코드를 발송한 대상
  /// 이메일, 핸드폰 번호
  target String @db.VarChar

  /// 인증 코드 타입
  type VerificationCodeType @default(EMAIL)
  created_at DateTime @default(now())
  /// 인증 코드 만료 시간
  expired_at DateTime
  /// 인증 코드 사용 여부
  verified_at DateTime?    
  status Status @default(ACTIVE)
  ///-------
  /// RELATION
  ///-------
  member members? @relation(fields: [member_id], references: [id])
  @@unique([code])



  @@index([created_at])
  @@index([code])
}


//--------------------------------------
// 1.2. 휴면 회원 관리
// ---
// - 휴면 회원 관련 법령이 폐지됨으로써, 고려할 필요가 없어짐
// dormant_members 
//--------------------------------------
//--------------------------------------
 





enum SocialType {
  KAKAO
  NAVER
  GOOGLE
  FACEBOOK
  GITHUB
  LINKEDIN
}

enum VerificationCodeType {
  EMAIL
  SMS
}


enum Status {
  ACTIVE
  INACTIVE
  DELETED
}


